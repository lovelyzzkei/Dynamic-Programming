#include<iostream>
#include<algorithm>
#include<ctime>
using namespace std;

int triangle[1010][1010] = { 0 };

int main() {
	cin.tie(NULL);
	cin.sync_with_stdio(false);
	cout.sync_with_stdio(false);

	/* get user's input as a shape of triagle. fill up empty space as 0.
	Then, a recurrence formula of this problem is triangle[i][k] = max(triangle[i - 1][k - 1] + triangle[i - 1][k + 1]) + triangle[i][k]
	similar to problem 1149. Lastly, print a maximum number on last line*/
	int n, num;
	cin >> n;

	// initializing array 'triangle'
	for (int i = 1; i <= n; i++) {
		for (int k = 1; k <= i; k++) {
			cin >> num;
			triangle[i][n - i + k * 2 - 1] = num;
		}
	}
	// compute recurrence formula
	for (int i = 2; i <= n; i++) {
		for (int k = 1; k <= i; k++) {
			triangle[i][n - i + k * 2 - 1] = max(triangle[i - 1][n - i + k * 2 - 2], triangle[i - 1][n - i + k * 2]) + triangle[i][n - i + k * 2 - 1];
		}
	}
	cout << *max_element(triangle[n], triangle[n] + 1010) << "\n";
	return 0;
}